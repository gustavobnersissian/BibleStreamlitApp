import streamlit as st
import json
from wordcloud import WordCloud
import matplotlib.pyplot as plt

# Mapeamento das abrevia√ß√µes para os nomes completos dos livros
livros_nomes = {
    "gn": "G√™nesis", "ex": "√äxodo", "lv": "Lev√≠tico", "nm": "N√∫meros", "dt": "Deuteron√¥mio",
    "js": "Josu√©", "jz": "Ju√≠zes", "rt": "Rute", "1sm": "1 Samuel", "2sm": "2 Samuel",
    "1rs": "1 Reis", "2rs": "2 Reis", "1cr": "1 Cr√¥nicas", "2cr": "2 Cr√¥nicas",
    "ed": "Esdras", "ne": "Neemias", "et": "Ester", "j√≥": "J√≥", "sl": "Salmos",
    "pv": "Prov√©rbios", "ec": "Eclesiastes", "ct": "Cantares", "is": "Isa√≠as",
    "jr": "Jeremias", "lm": "Lamenta√ß√µes", "ez": "Ezequiel", "dn": "Daniel",
    "os": "Os√©ias", "jl": "Joel", "am": "Am√≥s", "ob": "Obadias", "jn": "Jonas",
    "mq": "Miqu√©ias", "na": "Naum", "hc": "Habacuque", "sf": "Sofonias", "ag": "Ageu",
    "zc": "Zacarias", "ml": "Malaquias", "mt": "Mateus", "mc": "Marcos", "lc": "Lucas",
    "jo": "Jo√£o", "atos": "Atos", "rm": "Romanos", "1co": "1 Cor√≠ntios", "2co": "2 Cor√≠ntios",
    "gl": "G√°latas", "ef": "Ef√©sios", "fp": "Filipenses", "cl": "Colossenses",
    "1ts": "1 Tessalonicenses", "2ts": "2 Tessalonicenses", "1tm": "1 Tim√≥teo",
    "2tm": "2 Tim√≥teo", "tt": "Tito", "fm": "Filemom", "hb": "Hebreus",
    "tg": "Tiago", "1pe": "1 Pedro", "2pe": "2 Pedro", "1jo": "1 Jo√£o",
    "2jo": "2 Jo√£o", "3jo": "3 Jo√£o", "jd": "Judas", "ap": "Apocalipse"
}

# Lista de stop words para remover palavras irrelevantes
stop_words = set(["a", "o", "e", "que", "de", "do", "da", "dos", "das",
                  "em", "para", "por", "com", "n√£o", "uma", "como", "se",
                  "mas", "ou", "ao", "√†s", "os", "as", "isso", "este",
                  "ele", "ela", "eles", "elas", "porque", "por√©m", "sua", "suas",
                  "seu", "seus", "deu", "lhe", "um", "√©", "s√£o", "tu","se", "meu",
                  "nos", "todos", "aos", "na", "deu", "se", "√†", "lo", "lhe", "deu",
                  "at√©", "foi", "voc√™", "se", "lhe", "deu", "quem", "ent√£o"])

# Fun√ß√£o para carregar o JSON da B√≠blia
@st.cache_data
def load_biblia():
    with open('nvi.json', 'r', encoding='utf-8-sig') as file:
        return json.load(file)

# Fun√ß√£o para contar palavras e remover stop words
def contar_palavras(texto):
    palavras = texto.split()
    return [palavra.lower() for palavra in palavras if palavra.lower() not in stop_words]

# Carregar os dados da B√≠blia
biblia_data = load_biblia()

# Criar interface no Streamlit
st.title("üìñ Explorador da B√≠blia NVI")

# Selecionar livro (mostrando o nome completo)
livros_abrevs = [livro["abbrev"] for livro in biblia_data]
livro_escolhido_abrev = st.selectbox("Escolha um livro:", livros_abrevs, format_func=lambda x: livros_nomes.get(x, x))

# Encontrar os dados do livro escolhido
livro_data = next(livro for livro in biblia_data if livro["abbrev"] == livro_escolhido_abrev)

# Selecionar cap√≠tulo
capitulos = list(range(1, len(livro_data["chapters"]) + 1))
capitulo_escolhido = st.selectbox("Escolha um cap√≠tulo:", capitulos)

# Selecionar vers√≠culo (adicionando op√ß√£o "Todos")
versiculos = ["Todos"] + list(range(1, len(livro_data["chapters"][capitulo_escolhido - 1]) + 1))
versiculo_escolhido = st.selectbox("Escolha um vers√≠culo:", versiculos, index=0)  # Come√ßa sempre com "Todos"

# Exibir o vers√≠culo ou todos os vers√≠culos
st.write(f"### {livros_nomes[livro_escolhido_abrev]} {capitulo_escolhido}")
if versiculo_escolhido == "Todos":
    for i, versiculo in enumerate(livro_data["chapters"][capitulo_escolhido - 1], start=1):
        st.write(f"*{i}* {versiculo}")
else:
    st.write(f"*{versiculo_escolhido}* {livro_data['chapters'][capitulo_escolhido - 1][versiculo_escolhido - 1]}")

# Criar nuvem de palavras do cap√≠tulo selecionado
#texto_capitulo = " ".join([palavra for versiculo in livro_data["chapters"][capitulo_escolhido - 1] for palavra in contar_palavras(versiculo)])
#wordcloud_capitulo = WordCloud(width=800, height=400, background_color='white').generate(texto_capitulo)

# Criar nuvem de palavras do livro inteiro
texto_livro = " ".join([palavra for cap in livro_data["chapters"] for versiculo in cap for palavra in contar_palavras(versiculo)])
wordcloud_livro = WordCloud(width=800, height=400, background_color='white').generate(texto_livro)

# Exibir nuvem de palavras do cap√≠tulo
#.write(f"### Nuvem de palavras do cap√≠tulo {capitulo_escolhido} de {livros_nomes[livro_escolhido_abrev]}")
#plt.figure(figsize=(10, 5))
#plt.imshow(wordcloud_capitulo, interpolation="bilinear")
#plt.axis("off")
#st.pyplot(plt)

# Exibir nuvem de palavras do livro inteiro
st.write(f"### Nuvem de palavras do livro de {livros_nomes[livro_escolhido_abrev]}")
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud_livro, interpolation="bilinear")
plt.axis("off")
st.pyplot(plt)


===============
com grafico novo

import streamlit as st
import json
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from wordcloud import WordCloud
from collections import Counter
import io

# Mapeamento das abrevia√ß√µes para os nomes completos dos livros
livros_nomes = {
    "gn": "G√™nesis", "ex": "√äxodo", "lv": "Lev√≠tico", "nm": "N√∫meros", "dt": "Deuteron√¥mio",
    "js": "Josu√©", "jz": "Ju√≠zes", "rt": "Rute", "1sm": "1 Samuel", "2sm": "2 Samuel",
    "1rs": "1 Reis", "2rs": "2 Reis", "1cr": "1 Cr√¥nicas", "2cr": "2 Cr√¥nicas",
    "ed": "Esdras", "ne": "Neemias", "et": "Ester", "j√≥": "J√≥", "sl": "Salmos",
    "pv": "Prov√©rbios", "ec": "Eclesiastes", "ct": "Cantares", "is": "Isa√≠as",
    "jr": "Jeremias", "lm": "Lamenta√ß√µes", "ez": "Ezequiel", "dn": "Daniel",
    "os": "Os√©ias", "jl": "Joel", "am": "Am√≥s", "ob": "Obadias", "jn": "Jonas",
    "mq": "Miqu√©ias", "na": "Naum", "hc": "Habacuque", "sf": "Sofonias", "ag": "Ageu",
    "zc": "Zacarias", "ml": "Malaquias", "mt": "Mateus", "mc": "Marcos", "lc": "Lucas",
    "jo": "Jo√£o", "atos": "Atos", "rm": "Romanos", "1co": "1 Cor√≠ntios", "2co": "2 Cor√≠ntios",
    "gl": "G√°latas", "ef": "Ef√©sios", "fp": "Filipenses", "cl": "Colossenses",
    "1ts": "1 Tessalonicenses", "2ts": "2 Tessalonicenses", "1tm": "1 Tim√≥teo",
    "2tm": "2 Tim√≥teo", "tt": "Tito", "fm": "Filemom", "hb": "Hebreus",
    "tg": "Tiago", "1pe": "1 Pedro", "2pe": "2 Pedro", "1jo": "1 Jo√£o",
    "2jo": "2 Jo√£o", "3jo": "3 Jo√£o", "jd": "Judas", "ap": "Apocalipse"
}

# Lista de stop words para remover palavras irrelevantes
stop_words = set(["a", "o", "e", "que", "de", "do", "da", "dos", "das",
                  "em", "para", "por", "com", "n√£o", "uma", "como", "se",
                  "mas", "ou", "ao", "√†s", "os", "as", "isso", "este",
                  "ele", "ela", "eles", "elas", "porque", "por√©m", "sua", "suas",
                  "seu", "seus", "deu", "lhe", "um", "√©", "s√£o", "tu","se", "meu",
                  "nos", "todos", "aos", "na", "deu", "se", "√†", "lo", "lhe", "deu",
                  "at√©", "foi", "voc√™", "se", "lhe", "deu", "quem", "ent√£o"])

@st.cache_data
def load_biblia():
    with open('nvi.json', 'r', encoding='utf-8-sig') as file:
        return json.load(file)

def contar_palavras(texto):
    palavras = texto.split()
    return [palavra.lower() for palavra in palavras if palavra.lower() not in stop_words]

# Carregar os dados da B√≠blia
biblia_data = load_biblia()

st.title("üìñ Explorador da B√≠blia NVI")

livros_abrevs = [livro["abbrev"] for livro in biblia_data]
livro_escolhido = st.selectbox("Escolha um livro:", livros_abrevs, format_func=lambda x: livros_nomes.get(x, x))

livro_data = next(livro for livro in biblia_data if livro["abbrev"] == livro_escolhido)
capitulos = list(range(1, len(livro_data["chapters"]) + 1))
capitulo_escolhido = st.selectbox("Escolha um cap√≠tulo:", capitulos)
versiculos = ["Todos"] + list(range(1, len(livro_data["chapters"][capitulo_escolhido - 1]) + 1))
versiculo_escolhido = st.selectbox("Escolha um vers√≠culo:", versiculos, index=0)

st.write(f"### {livros_nomes[livro_escolhido]} {capitulo_escolhido}")
if versiculo_escolhido == "Todos":
    for i, versiculo in enumerate(livro_data["chapters"][capitulo_escolhido - 1], start=1):
        st.write(f"*{i}* {versiculo}")
else:
    st.write(f"*{versiculo_escolhido}* {livro_data['chapters'][capitulo_escolhido - 1][versiculo_escolhido - 1]}")

st.write("### Gr√°ficos e Nuvem de Palavras")
palavras_processadas = contar_palavras(" ".join(livro_data["chapters"][capitulo_escolhido - 1]))
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(" ".join(palavras_processadas))
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
st.pyplot(plt)

def gerar_grafico_frequencia(palavras):
    contagem = Counter(palavras)
    df = pd.DataFrame(contagem.most_common(10), columns=['Palavra', 'Frequ√™ncia'])
    plt.figure(figsize=(8, 5))
    sns.barplot(x='Frequ√™ncia', y='Palavra', data=df, palette='viridis')
    st.pyplot(plt)

gerar_grafico_frequencia(palavras_processadas)

if st.button("Copiar Texto"):
    st.write("Texto copiado para a √°rea de transfer√™ncia! (Simula√ß√£o)")

===============

+ features

import streamlit as st
import json
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from wordcloud import WordCloud
from collections import Counter
import io

# Mapeamento das abrevia√ß√µes para os nomes completos dos livros
livros_nomes = {
    "gn": "G√™nesis", "ex": "√äxodo", "lv": "Lev√≠tico", "nm": "N√∫meros", "dt": "Deuteron√¥mio",
    "js": "Josu√©", "jz": "Ju√≠zes", "rt": "Rute", "1sm": "1 Samuel", "2sm": "2 Samuel",
    "1rs": "1 Reis", "2rs": "2 Reis", "1cr": "1 Cr√¥nicas", "2cr": "2 Cr√¥nicas",
    "ed": "Esdras", "ne": "Neemias", "et": "Ester", "j√≥": "J√≥", "sl": "Salmos",
    "pv": "Prov√©rbios", "ec": "Eclesiastes", "ct": "Cantares", "is": "Isa√≠as",
    "jr": "Jeremias", "lm": "Lamenta√ß√µes", "ez": "Ezequiel", "dn": "Daniel",
    "os": "Os√©ias", "jl": "Joel", "am": "Am√≥s", "ob": "Obadias", "jn": "Jonas",
    "mq": "Miqu√©ias", "na": "Naum", "hc": "Habacuque", "sf": "Sofonias", "ag": "Ageu",
    "zc": "Zacarias", "ml": "Malaquias", "mt": "Mateus", "mc": "Marcos", "lc": "Lucas",
    "jo": "Jo√£o", "atos": "Atos", "rm": "Romanos", "1co": "1 Cor√≠ntios", "2co": "2 Cor√≠ntios",
    "gl": "G√°latas", "ef": "Ef√©sios", "fp": "Filipenses", "cl": "Colossenses",
    "1ts": "1 Tessalonicenses", "2ts": "2 Tessalonicenses", "1tm": "1 Tim√≥teo",
    "2tm": "2 Tim√≥teo", "tt": "Tito", "fm": "Filemom", "hb": "Hebreus",
    "tg": "Tiago", "1pe": "1 Pedro", "2pe": "2 Pedro", "1jo": "1 Jo√£o",
    "2jo": "2 Jo√£o", "3jo": "3 Jo√£o", "jd": "Judas", "ap": "Apocalipse"
}

# Lista de stop words para remover palavras irrelevantes
stop_words = set(["a", "o", "e", "que", "de", "do", "da", "dos", "das",
                  "em", "para", "por", "com", "n√£o", "uma", "como", "se",
                  "mas", "ou", "ao", "√†s", "os", "as", "isso", "este",
                  "ele", "ela", "eles", "elas", "porque", "por√©m", "sua", "suas",
                  "seu", "seus", "deu", "lhe", "um", "√©", "s√£o", "tu","se", "meu",
                  "nos", "todos", "aos", "na", "deu", "se", "√†", "lo", "lhe", "deu",
                  "at√©", "foi", "voc√™", "se", "lhe", "deu", "quem", "ent√£o", "os", "as",
                  "um", "com" "se", "no", "sua","seu", "'", "me", "lhes","pois","sem", "est√°",
                  "voc√™s", "eu","quando","nem","algu√©m","‚Äî","minha","voc√™s,", "est√£o"])

@st.cache_data
def load_biblia():
    with open('nvi.json', 'r', encoding='utf-8-sig') as file:
        return json.load(file)

def contar_palavras(texto):
    palavras = texto.split()
    return [palavra.lower() for palavra in palavras if palavra.lower() not in stop_words]

# Carregar os dados da B√≠blia
biblia_data = load_biblia()

st.title("üìñ Explorador da B√≠blia NVI")

livros_abrevs = [livro["abbrev"] for livro in biblia_data]
livro_escolhido = st.selectbox("Escolha um livro:", livros_abrevs, format_func=lambda x: livros_nomes.get(x, x))

livro_data = next(livro for livro in biblia_data if livro["abbrev"] == livro_escolhido)
capitulos = ["Todos"] + list(range(1, len(livro_data["chapters"]) + 1))
capitulo_escolhido = st.selectbox("Escolha um cap√≠tulo:", capitulos)

if capitulo_escolhido == "Todos":
    versiculos = ["Todos"]
else:
    versiculos = ["Todos"] + list(range(1, len(livro_data["chapters"][capitulo_escolhido - 1]) + 1))
versiculo_escolhido = st.selectbox("Escolha um vers√≠culo:", versiculos, index=0)

st.write(f"### {livros_nomes[livro_escolhido]}")
if capitulo_escolhido == "Todos":
    texto_completo = "\n".join(f"*{i+1}* {versiculo}" for cap in livro_data["chapters"] for i, versiculo in enumerate(cap))
elif versiculo_escolhido == "Todos":
    texto_completo = "\n".join(f"*{i+1}* {versiculo}" for i, versiculo in enumerate(livro_data["chapters"][capitulo_escolhido - 1]))
else:
    texto_completo = f"*{versiculo_escolhido}* {livro_data['chapters'][capitulo_escolhido - 1][versiculo_escolhido - 1]}"
st.write(texto_completo)

st.download_button("Baixar Texto", texto_completo, file_name="texto_biblia.txt")

st.write("### Gr√°ficos e Nuvem de Palavras")
palavras_processadas = contar_palavras(texto_completo)
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(" ".join(palavras_processadas))
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
st.pyplot(plt)

plt.figure(figsize=(8, 5))
contagem = Counter(palavras_processadas)
df = pd.DataFrame(contagem.most_common(10), columns=['Palavra', 'Frequ√™ncia'])
sns.barplot(x='Frequ√™ncia', y='Palavra', data=df, palette='viridis')
st.pyplot(plt)

if st.button("Copiar Texto"):
    st.write("Texto copiado para a √°rea de transfer√™ncia! (Simula√ß√£o)")
===================

novos graficos e fatures e sobre

import streamlit as st
import json
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from wordcloud import WordCloud
from collections import Counter
import io

# Mapeamento das abrevia√ß√µes para os nomes completos dos livros
livros_nomes = {
    "gn": "G√™nesis", "ex": "√äxodo", "lv": "Lev√≠tico", "nm": "N√∫meros", "dt": "Deuteron√¥mio",
    "js": "Josu√©", "jz": "Ju√≠zes", "rt": "Rute", "1sm": "1 Samuel", "2sm": "2 Samuel",
    "1rs": "1 Reis", "2rs": "2 Reis", "1cr": "1 Cr√¥nicas", "2cr": "2 Cr√¥nicas",
    "ed": "Esdras", "ne": "Neemias", "et": "Ester", "j√≥": "J√≥", "sl": "Salmos",
    "pv": "Prov√©rbios", "ec": "Eclesiastes", "ct": "Cantares", "is": "Isa√≠as",
    "jr": "Jeremias", "lm": "Lamenta√ß√µes", "ez": "Ezequiel", "dn": "Daniel",
    "os": "Os√©ias", "jl": "Joel", "am": "Am√≥s", "ob": "Obadias", "jn": "Jonas",
    "mq": "Miqu√©ias", "na": "Naum", "hc": "Habacuque", "sf": "Sofonias", "ag": "Ageu",
    "zc": "Zacarias", "ml": "Malaquias", "mt": "Mateus", "mc": "Marcos", "lc": "Lucas",
    "jo": "Jo√£o", "atos": "Atos", "rm": "Romanos", "1co": "1 Cor√≠ntios", "2co": "2 Cor√≠ntios",
    "gl": "G√°latas", "ef": "Ef√©sios", "fp": "Filipenses", "cl": "Colossenses",
    "1ts": "1 Tessalonicenses", "2ts": "2 Tessalonicenses", "1tm": "1 Tim√≥teo",
    "2tm": "2 Tim√≥teo", "tt": "Tito", "fm": "Filemom", "hb": "Hebreus",
    "tg": "Tiago", "1pe": "1 Pedro", "2pe": "2 Pedro", "1jo": "1 Jo√£o",
    "2jo": "2 Jo√£o", "3jo": "3 Jo√£o", "jd": "Judas", "ap": "Apocalipse"
}

# Lista de stop words para remover palavras irrelevantes
stop_words = set(["a", "o", "e", "que", "de", "do", "da", "dos", "das",
                  "em", "para", "por", "com", "n√£o", "uma", "como", "se",
                  "mas", "ou", "ao", "√†s", "os", "as", "isso", "este",
                  "ele", "ela", "eles", "elas", "porque", "por√©m", "sua", "suas",
                  "seu", "seus", "deu", "lhe", "um", "√©", "s√£o", "tu","se", "meu",
                  "nos", "todos", "aos", "na", "deu", "se", "√†", "lo", "lhe", "deu",
                  "at√©", "foi", "voc√™", "se", "lhe", "deu", "quem", "ent√£o", "os", "as",
                  "um", "com" "se", "no", "sua","seu", "'", "me", "lhes","pois","sem", "est√°",
                  "voc√™s", "eu","quando","nem","algu√©m","‚Äî","minha","voc√™s,", "est√£o"])

@st.cache_data
def load_biblia():
    with open('nvi.json', 'r', encoding='utf-8-sig') as file:
        return json.load(file)

def contar_palavras(texto):
    palavras = texto.split()
    return [palavra.lower() for palavra in palavras if palavra.lower() not in stop_words]

# Carregar os dados da B√≠blia
biblia_data = load_biblia()

st.title("üìñ Explorador da B√≠blia NVI")

livros_abrevs = [livro["abbrev"] for livro in biblia_data]
livro_escolhido = st.selectbox("Escolha um livro:", livros_abrevs, format_func=lambda x: livros_nomes.get(x, x))

livro_data = next(livro for livro in biblia_data if livro["abbrev"] == livro_escolhido)
capitulos = ["Todos"] + list(range(1, len(livro_data["chapters"]) + 1))
capitulo_escolhido = st.selectbox("Escolha um cap√≠tulo:", capitulos)

if capitulo_escolhido == "Todos":
    versiculos = ["Todos"]
else:
    versiculos = ["Todos"] + list(range(1, len(livro_data["chapters"][capitulo_escolhido - 1]) + 1))
versiculo_escolhido = st.selectbox("Escolha um vers√≠culo:", versiculos)

st.write(f"### {livros_nomes[livro_escolhido]}")
if capitulo_escolhido == "Todos":
    texto_completo = "\n".join(f"*{i+1}* {versiculo}" for cap in livro_data["chapters"] for i, versiculo in enumerate(cap))
elif versiculo_escolhido == "Todos":
    texto_completo = "\n".join(f"*{i+1}* {versiculo}" for i, versiculo in enumerate(livro_data["chapters"][capitulo_escolhido - 1]))
else:
    texto_completo = f"*{versiculo_escolhido}* {livro_data['chapters'][capitulo_escolhido - 1][versiculo_escolhido - 1]}"
st.write(texto_completo)

# Estat√≠sticas
total_palavras_biblia = sum(len(contar_palavras(" ".join(cap))) for livro in biblia_data for cap in livro["chapters"])
palavras_livro = len(contar_palavras(texto_completo))
percentual = (palavras_livro / total_palavras_biblia) * 100

# Gr√°ficos
st.write("### Nuvem de Palavras")
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(" ".join(contar_palavras(texto_completo)))
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
st.pyplot(plt)

st.write("### Distribui√ß√£o de Palavras")
df = pd.DataFrame(Counter(contar_palavras(texto_completo)).most_common(15), columns=['Palavra', 'Frequ√™ncia'])
plt.figure(figsize=(8, 5))
sns.barplot(x='Frequ√™ncia', y='Palavra', data=df, palette='viridis')
st.pyplot(plt)

st.write("### Comprimento dos Vers√≠culos")
verso_lengths = [len(contar_palavras(verso)) for cap in livro_data["chapters"] for verso in cap]
plt.figure(figsize=(8, 5))
sns.histplot(verso_lengths, bins=20, kde=True, color='blue')
st.pyplot(plt)

st.write("### Propor√ß√£o do Livro na B√≠blia")

st.write(f"üìä O livro {livros_nomes[livro_escolhido]} representa {percentual:.2f}% do total de palavras da B√≠blia.")

plt.figure(figsize=(6, 6))
plt.pie([palavras_livro, total_palavras_biblia - palavras_livro], labels=[livros_nomes[livro_escolhido], "Resto da B√≠blia"], autopct='%1.1f%%', colors=['green', 'gray'])
st.pyplot(plt)

if st.button("Copiar Texto"):
    st.write("Texto copiado para a √°rea de transfer√™ncia! (Simula√ß√£o)")

with st.expander("Sobre este aplicativo"):
    st.write("""
    Este aplicativo permite explorar a B√≠blia de forma interativa.
    - Escolha um livro, cap√≠tulo e vers√≠culo.
    - Veja estat√≠sticas e visualiza√ß√µes.
    - Copie ou baixe o texto.
    Desenvolvido com ‚ù§Ô∏è usando Streamlit.
    """)

=================

